{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"title: Introduction - Documentation de SimPLU3D authors: - Micka\u00ebl Brasebin date: 2018-10-39 Documentation de SimPLU3D \uf0c1 SimPLU3D est un ensemble de biblioth\u00e8ques Java Open-Source qui permet de simuler des formes b\u00e2ties en 3D optimisant une fonction \u00e0 partir de contraintes morphologiques. Ces codes peuvent \u00eatre utiliser pour questionner le rapport entre des contraintes morphologiques (par exemple issues de r\u00e9glementation) et les formes produites \u00e0 l'\u00e9chelle du quartier ou de l'agglom\u00e9ration. L'approche de SimPLU3D est g\u00e9n\u00e9rique dans le sens o\u00f9 il est possible de d\u00e9finir ses propres contraintes, fonctions d'optimisations ou types de formes. L'ensemble de ces biblioth\u00e8que est disponible dans l'organisation Github SimPLU3D . Principe de fonctionnement de SimPLU3D Cette biblioth\u00e8que a notamment \u00e9t\u00e9 utilis\u00e9e pour mod\u00e9liser des formes b\u00e2ties \u00e0 partir de contraintes issues de Plans Locaux d'Urbanisme (PLU) et permet de r\u00e9pondre \u00e0 ce type de questions : Quelle est la quantit\u00e9 de logements que l'on peut b\u00e2tir sur une parcelle ? Comment est-ce que la forme de mon quartier va \u00e9voluer si l'on change un PLU ? Est-ce que des b\u00e2timents faisaient une ombre trop importante sur les parcelles voisines peuvent \u00eatre construits ? SimPLU3D a d\u00e9j\u00e0 fait l'objet de plusieurs applications et publications, n'h\u00e9sitez pas consulter la liste des r\u00e9alisations et publications . SimPLU3D est d\u00e9velopp\u00e9 et maintenu par le laboratoire LASTIG de l' Institut National de l'Information G\u00e9ographique et Foresti\u00e8re . N'h\u00e9sitez pas \u00e0 nous contacter pour nous fait un retour sur SimPLU3D ou pour utiliser le code. Cette documentation a pour but de montrer comment utiliser SimPLU3D et de param\u00e9trer l'approche en fonction de vos besoins. Pour commencer, la premi\u00e8re \u00e9tape est d'installer les biblioth\u00e8ques et de lancer une premi\u00e8re simulation (par ici) . La conception et le d\u00e9veloppement de SimPLU3D ont \u00e9t\u00e9 initi\u00e9s dans le cadre de la th\u00e8se : Brasebin, M. (2014) Les donn\u00e9es g\u00e9ographiques 3D pour simuler l'impact de la r\u00e9glementation urbaine sur la morphologie du b\u00e2ti, Th\u00e8se de doctorat, sp\u00e9cialit\u00e9 Sciences et Technologies de l'Information G\u00e9ographique, Universit\u00e9 Paris-Est, apr 2014 M\u00e9moire , Pr\u00e9sentation","title":"Accueil"},{"location":"#documentation-de-simplu3d","text":"SimPLU3D est un ensemble de biblioth\u00e8ques Java Open-Source qui permet de simuler des formes b\u00e2ties en 3D optimisant une fonction \u00e0 partir de contraintes morphologiques. Ces codes peuvent \u00eatre utiliser pour questionner le rapport entre des contraintes morphologiques (par exemple issues de r\u00e9glementation) et les formes produites \u00e0 l'\u00e9chelle du quartier ou de l'agglom\u00e9ration. L'approche de SimPLU3D est g\u00e9n\u00e9rique dans le sens o\u00f9 il est possible de d\u00e9finir ses propres contraintes, fonctions d'optimisations ou types de formes. L'ensemble de ces biblioth\u00e8que est disponible dans l'organisation Github SimPLU3D . Principe de fonctionnement de SimPLU3D Cette biblioth\u00e8que a notamment \u00e9t\u00e9 utilis\u00e9e pour mod\u00e9liser des formes b\u00e2ties \u00e0 partir de contraintes issues de Plans Locaux d'Urbanisme (PLU) et permet de r\u00e9pondre \u00e0 ce type de questions : Quelle est la quantit\u00e9 de logements que l'on peut b\u00e2tir sur une parcelle ? Comment est-ce que la forme de mon quartier va \u00e9voluer si l'on change un PLU ? Est-ce que des b\u00e2timents faisaient une ombre trop importante sur les parcelles voisines peuvent \u00eatre construits ? SimPLU3D a d\u00e9j\u00e0 fait l'objet de plusieurs applications et publications, n'h\u00e9sitez pas consulter la liste des r\u00e9alisations et publications . SimPLU3D est d\u00e9velopp\u00e9 et maintenu par le laboratoire LASTIG de l' Institut National de l'Information G\u00e9ographique et Foresti\u00e8re . N'h\u00e9sitez pas \u00e0 nous contacter pour nous fait un retour sur SimPLU3D ou pour utiliser le code. Cette documentation a pour but de montrer comment utiliser SimPLU3D et de param\u00e9trer l'approche en fonction de vos besoins. Pour commencer, la premi\u00e8re \u00e9tape est d'installer les biblioth\u00e8ques et de lancer une premi\u00e8re simulation (par ici) . La conception et le d\u00e9veloppement de SimPLU3D ont \u00e9t\u00e9 initi\u00e9s dans le cadre de la th\u00e8se : Brasebin, M. (2014) Les donn\u00e9es g\u00e9ographiques 3D pour simuler l'impact de la r\u00e9glementation urbaine sur la morphologie du b\u00e2ti, Th\u00e8se de doctorat, sp\u00e9cialit\u00e9 Sciences et Technologies de l'Information G\u00e9ographique, Universit\u00e9 Paris-Est, apr 2014 M\u00e9moire , Pr\u00e9sentation","title":"Documentation de SimPLU3D"},{"location":"about/","text":"Qui contacter ? Qui a fait quoi ? Nous contacter : Si vous souhaitez utiliser SimPLU3D, n'h\u00e9sitez pas \u00e0 nous contacter, Pour signaler un bug n'h\u00e9sitez pas \u00e0 faire un pull request dans l'un des projets Remerciements :","title":"\u00c0 propos"},{"location":"bibliographie/","text":"Liste d'articles et lien vers des r\u00e9alisations","title":"R\u00e9alisations et bibliographie"},{"location":"development/","text":"Page listant les futurs d\u00e9veloppements : Persistance de l'environnement g\u00e9ographique (par exemple pour reprendre manuellement des \u00e9tapes du processus d'int\u00e9gration) Aspect esth\u00e9tique","title":"Futurs d\u00e9veloppements"},{"location":"export/","text":"Page sur les m\u00e9thodes pour exporter les r\u00e9sultats, en shapefile, \u00e0 la main, en base de donn\u00e9es.","title":"Exporter les r\u00e9sultats d'une simulation"},{"location":"begin/first_simulation/","text":"Introduction \uf0c1 L'objectif de cette page est de lancer une premi\u00e8re simulation tr\u00e8s simple afin de voir comment se d\u00e9roule une simulation de SimPLU3D. Cette simulation consiste \u00e0 g\u00e9n\u00e9rer une forme compos\u00e9 de boites qui s'intersectent \u00e0 partir d'un code exemple qui sera enrichi au fur et \u00e0 mesure de cette documentation. Pour commencer, il est n\u00e9cessaire d'installer les codes de tutoriel comme pr\u00e9cis\u00e9 dans la page d'installation . Le code utilis\u00e9 dans cette page est dans la classe : fr.ign.simplu3d.firstSimulation.BasicSimulator. Donn\u00e9es d'entr\u00e9e \uf0c1 Les donn\u00e9es en entr\u00e9e se trouvent dans le r\u00e9pertoire de ressources resources/firstSimulation/ . Il s'agit du plus petit ensemble de donn\u00e9es possible n\u00e9cessaire pour ex\u00e9cuter SimPLU3D. Il contient deux dossiers : - data : qui contient un fichier ShapeFile de parcelles (parcelle.shp) avec un attribut id . Ces parcelles d\u00e9finissent l'environnement g\u00e9ographique dans lequel se d\u00e9roule la simulation, cet environnement g\u00e9ographique peut \u00eatre enrichi d'autres objets d\u00e9j\u00e0 pr\u00e9vus dans SimPLU3D (vous trouverez plus d'informations dans la section consacr\u00e9 \u00e0 l'environnement g\u00e9ographique ) ; - scenario : qui contient un fichier params.json qui contient la description des param\u00e8tres de la g\u00e9n\u00e9ration de forme (d\u00e9crits dans la section d\u00e9di\u00e9e aux param\u00e8tres de la g\u00e9n\u00e9ration de formes ) et des visiteurs qui seront ex\u00e9cut\u00e9s pendant la simulation ( d\u00e9crits dans la section d\u00e9di\u00e9e aux visiteurs ). Code de simulation \uf0c1 Le code \u00e0 ex\u00e9cuter est repris ci-dessous comment\u00e9. On note qu'il y a 4 \u00e9tapes n\u00e9cessaires pour ex\u00e9cuter la simulation : la cr\u00e9ation d'un environnement g\u00e9ographique ; la d\u00e9finition de contraintes morphologiques , \u00e0 partir d'une classe de v\u00e9rification de r\u00e8gles d\u00e9j\u00e0 impl\u00e9ment\u00e9e ; la d\u00e9finition d'un g\u00e9n\u00e9rateur de formes , bas\u00e9 sur des boites ; l' export de r\u00e9sultats . public static void main(String[] args) throws Exception { //Step 0 ; Defining an output existing folder String outputFolder = /tmp/ ; // Step 1 : Creating the geographic environnement using the repository that contains the data // Load default environment (data are in resource directory) Environnement env = LoaderSHP.loadNoDTM( new File(BasicSimulator.class.getClassLoader().getResource( firstSimulation/data/ ).getPath())); // Select a parcel on which generation is proceeded BasicPropertyUnit bPU = env.getBpU().get(2); //Step 2 : Defining the regulation that will be applied during the simulation // Rules parameters.8 // Distance to road double distReculVoirie = 2; // Distance to bottom of the parcel double distReculFond = 3; // Distance to lateral parcel limits double distReculLat = 4; // Distance between two buildings of a parcel double distanceInterBati = 0; // Maximal ratio built area double maximalCES = 0.5; //Instanciation of a predicate class SamplePredicate Cuboid, GraphConfiguration Cuboid , BirthDeathModification Cuboid pred = new SamplePredicate ( bPU, distReculVoirie, distReculFond, distReculLat, distanceInterBati, maximalCES); //Step 3 : Defining the regulation that will be applied during the simulation // Instantiation of the sampler OptimisedBuildingsCuboidFinalDirectRejection oCB = new OptimisedBuildingsCuboidFinalDirectRejection(); // Loading the parameters for the building shape generation String folderName = BasicSimulator.class.getClassLoader().getResource( firstSimulation/scenario/ ).getPath(); String fileName = params.json ; SimpluParameters p = new SimpluParametersJSON(new File(folderName + fileName)); // Run of the optimisation on a parcel with the predicate GraphConfiguration Cuboid cc = oCB.process(bPU, p, env, 1, pred); //4 - Writting the output SaveGeneratedObjects.saveShapefile(outputFolder + out.shp , cc, bPU.getId(), 0); } Ex\u00e9cution du code de simulation \uf0c1 Avant d'ex\u00e9cuter ce code, il est n\u00e9cessaire de d\u00e9finir la variable outputFolder qui d\u00e9termine le dossier dans lequel les r\u00e9sultats de la simulation seront export\u00e9s. Une fois cette valeur fix\u00e9e, vous pouvez ex\u00e9cuter le code. Pendant le code, des informations sur l'avancement de la simulation seront affich\u00e9es (pour en savoir plus la section suivre l'\u00e9volution d'une simulation ). Deux sorties sont visualisables pendant la simulation : - Dans la console, un tableau repr\u00e9sente durant les it\u00e9rations des informations relatives \u00e0 la simulation et notamment le nombre d'objets et la valeur de la fonction d'optimisation ; - Dans une fen\u00eatre, la valeur de la fonction d'optimisation (en rouge fonc\u00e9) \u00e9volue au fur et \u00e0 mesure des it\u00e9rations. Dans ce cas, la valeur repr\u00e9sent\u00e9e est - le volume de la configuration (l'algorithme d'optimisation utilis\u00e9 minimisant la valeur d'une fonction d'optimisation, c'est pour cela que la valeur \u00e9volue en diminuant). R\u00e9sultats de la premi\u00e8re simulation \uf0c1 La sortie est stock\u00e9e sous la forme d'un ShapeFile out.shp qui contient les diff\u00e9rentes boites avec des attributs : id : l'identifiant de la parcelle simul\u00e9e ; hauteur : la hauteur de la boite ; longueur : la longueur de la boite ; largeur : la largeur de la boite ; orient : l'azimut de la boite ; centerX , centerY : les coordonn\u00e9es du centre de la boite. La g\u00e9om\u00e9trie est une g\u00e9om\u00e9trie 3D stock\u00e9e sous la forme d'un multipolygoneZ. Vous pouvez essayer de modifier le code pour tester les r\u00e9sultats sur diff\u00e9rentes parcelles ou diffrentes variables de r\u00e8gles. Dans la section suivante , nous d\u00e9taillons le principe de fonctionnement de la simulation.","title":"Premiers pas - Premi\u00e8re simulation"},{"location":"begin/first_simulation/#introduction","text":"L'objectif de cette page est de lancer une premi\u00e8re simulation tr\u00e8s simple afin de voir comment se d\u00e9roule une simulation de SimPLU3D. Cette simulation consiste \u00e0 g\u00e9n\u00e9rer une forme compos\u00e9 de boites qui s'intersectent \u00e0 partir d'un code exemple qui sera enrichi au fur et \u00e0 mesure de cette documentation. Pour commencer, il est n\u00e9cessaire d'installer les codes de tutoriel comme pr\u00e9cis\u00e9 dans la page d'installation . Le code utilis\u00e9 dans cette page est dans la classe : fr.ign.simplu3d.firstSimulation.BasicSimulator.","title":"Introduction"},{"location":"begin/first_simulation/#donnees-dentree","text":"Les donn\u00e9es en entr\u00e9e se trouvent dans le r\u00e9pertoire de ressources resources/firstSimulation/ . Il s'agit du plus petit ensemble de donn\u00e9es possible n\u00e9cessaire pour ex\u00e9cuter SimPLU3D. Il contient deux dossiers : - data : qui contient un fichier ShapeFile de parcelles (parcelle.shp) avec un attribut id . Ces parcelles d\u00e9finissent l'environnement g\u00e9ographique dans lequel se d\u00e9roule la simulation, cet environnement g\u00e9ographique peut \u00eatre enrichi d'autres objets d\u00e9j\u00e0 pr\u00e9vus dans SimPLU3D (vous trouverez plus d'informations dans la section consacr\u00e9 \u00e0 l'environnement g\u00e9ographique ) ; - scenario : qui contient un fichier params.json qui contient la description des param\u00e8tres de la g\u00e9n\u00e9ration de forme (d\u00e9crits dans la section d\u00e9di\u00e9e aux param\u00e8tres de la g\u00e9n\u00e9ration de formes ) et des visiteurs qui seront ex\u00e9cut\u00e9s pendant la simulation ( d\u00e9crits dans la section d\u00e9di\u00e9e aux visiteurs ).","title":"Donn\u00e9es d'entr\u00e9e"},{"location":"begin/first_simulation/#code-de-simulation","text":"Le code \u00e0 ex\u00e9cuter est repris ci-dessous comment\u00e9. On note qu'il y a 4 \u00e9tapes n\u00e9cessaires pour ex\u00e9cuter la simulation : la cr\u00e9ation d'un environnement g\u00e9ographique ; la d\u00e9finition de contraintes morphologiques , \u00e0 partir d'une classe de v\u00e9rification de r\u00e8gles d\u00e9j\u00e0 impl\u00e9ment\u00e9e ; la d\u00e9finition d'un g\u00e9n\u00e9rateur de formes , bas\u00e9 sur des boites ; l' export de r\u00e9sultats . public static void main(String[] args) throws Exception { //Step 0 ; Defining an output existing folder String outputFolder = /tmp/ ; // Step 1 : Creating the geographic environnement using the repository that contains the data // Load default environment (data are in resource directory) Environnement env = LoaderSHP.loadNoDTM( new File(BasicSimulator.class.getClassLoader().getResource( firstSimulation/data/ ).getPath())); // Select a parcel on which generation is proceeded BasicPropertyUnit bPU = env.getBpU().get(2); //Step 2 : Defining the regulation that will be applied during the simulation // Rules parameters.8 // Distance to road double distReculVoirie = 2; // Distance to bottom of the parcel double distReculFond = 3; // Distance to lateral parcel limits double distReculLat = 4; // Distance between two buildings of a parcel double distanceInterBati = 0; // Maximal ratio built area double maximalCES = 0.5; //Instanciation of a predicate class SamplePredicate Cuboid, GraphConfiguration Cuboid , BirthDeathModification Cuboid pred = new SamplePredicate ( bPU, distReculVoirie, distReculFond, distReculLat, distanceInterBati, maximalCES); //Step 3 : Defining the regulation that will be applied during the simulation // Instantiation of the sampler OptimisedBuildingsCuboidFinalDirectRejection oCB = new OptimisedBuildingsCuboidFinalDirectRejection(); // Loading the parameters for the building shape generation String folderName = BasicSimulator.class.getClassLoader().getResource( firstSimulation/scenario/ ).getPath(); String fileName = params.json ; SimpluParameters p = new SimpluParametersJSON(new File(folderName + fileName)); // Run of the optimisation on a parcel with the predicate GraphConfiguration Cuboid cc = oCB.process(bPU, p, env, 1, pred); //4 - Writting the output SaveGeneratedObjects.saveShapefile(outputFolder + out.shp , cc, bPU.getId(), 0); }","title":"Code de simulation"},{"location":"begin/first_simulation/#execution-du-code-de-simulation","text":"Avant d'ex\u00e9cuter ce code, il est n\u00e9cessaire de d\u00e9finir la variable outputFolder qui d\u00e9termine le dossier dans lequel les r\u00e9sultats de la simulation seront export\u00e9s. Une fois cette valeur fix\u00e9e, vous pouvez ex\u00e9cuter le code. Pendant le code, des informations sur l'avancement de la simulation seront affich\u00e9es (pour en savoir plus la section suivre l'\u00e9volution d'une simulation ). Deux sorties sont visualisables pendant la simulation : - Dans la console, un tableau repr\u00e9sente durant les it\u00e9rations des informations relatives \u00e0 la simulation et notamment le nombre d'objets et la valeur de la fonction d'optimisation ; - Dans une fen\u00eatre, la valeur de la fonction d'optimisation (en rouge fonc\u00e9) \u00e9volue au fur et \u00e0 mesure des it\u00e9rations. Dans ce cas, la valeur repr\u00e9sent\u00e9e est - le volume de la configuration (l'algorithme d'optimisation utilis\u00e9 minimisant la valeur d'une fonction d'optimisation, c'est pour cela que la valeur \u00e9volue en diminuant).","title":"Ex\u00e9cution du code de simulation"},{"location":"begin/first_simulation/#resultats-de-la-premiere-simulation","text":"La sortie est stock\u00e9e sous la forme d'un ShapeFile out.shp qui contient les diff\u00e9rentes boites avec des attributs : id : l'identifiant de la parcelle simul\u00e9e ; hauteur : la hauteur de la boite ; longueur : la longueur de la boite ; largeur : la largeur de la boite ; orient : l'azimut de la boite ; centerX , centerY : les coordonn\u00e9es du centre de la boite. La g\u00e9om\u00e9trie est une g\u00e9om\u00e9trie 3D stock\u00e9e sous la forme d'un multipolygoneZ. Vous pouvez essayer de modifier le code pour tester les r\u00e9sultats sur diff\u00e9rentes parcelles ou diffrentes variables de r\u00e8gles. Dans la section suivante , nous d\u00e9taillons le principe de fonctionnement de la simulation.","title":"R\u00e9sultats de la premi\u00e8re simulation"},{"location":"begin/installation/","text":"Installer SimPLU3D \uf0c1 Les biblioth\u00e8ques de SimPLU3D sont construites avec Maven et cod\u00e9es en Java (la version 8 de la JDK est requise) et sont r\u00e9guli\u00e8rement d\u00e9ploy\u00e9es sur le serveur Maven de l'IGN. Si vous voulez essayer les codes d\u00e9crits dans cette documentation, vous pouvez installer le projet SimPLU3D-tutorial ou sinon vous pouvez directement l'installer dans votre projet. Attention : il se peut que la compilation du projet ne se fasse pas \u00e0 cause de probl\u00e8mes li\u00e9es \u00e0 la v\u00e9rification du certificat ssh de la forge IGN. Pour cela deux solutions : Installer localement le certificat comme d\u00e9crit dans le lien suivant http://ignf.github.io/geoxygene/documentation/developer/install.html Faire une installation s\u00e9curis\u00e9e lorsqu'il faudra construire le projet : mvn clean install -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true Installer le code SimPLU3D-tutorial \uf0c1 Les \u00e9tapes suivantes sont n\u00e9cessaires : 1 - Installer un environnement de d\u00e9veloppement compatible avec Maven, nous recommandons de suivre ces \u00e9tapes : http://ignf.github.io/geoxygene/documentation/developer/install.html 2 - Cloner avec Git le projet https://github.com/SimPLU3D/simplu3D-tutorial 3 - Importer le projet dans l'environnement de d\u00e9veloppement. Dans Eclipse \"Fichier Importer un projet Importer un projet Maven\" 4 - Lancer une installation avec Maven : Click droit sur le projet et \" Run as Maven Install \" ou directement en ligne de commande : mvn clean install 5 - Lancer une construction du projet avec Eclipse : Project Build project Vous pouvez d\u00e9sormais ex\u00e9cuter la premi\u00e8re simulation . Installer SimPLU3D dans un autre projet \uf0c1 L'installation s'effectue simplement en cr\u00e9ant un projet qui pointe vers les d\u00e9pendances de SimPLU3D. Les \u00e9tapes sont les suivantes : 1 - Cr\u00e9ation d'un projet Maven 2 - Ajout de la d\u00e9pendance \u00e0 SimPLU3D dans le pom.xml dans les balises dependencies , en pensant \u00e0 v\u00e9rifier la version actuelle de SimPLU3D. dependency groupId fr.ign.cogit /groupId artifactId simplu3d /artifactId version 1.2-SNAPSHOT /version /dependency 3 - Ajouter les d\u00e9p\u00f4ts sur lesquels est d\u00e9ploy\u00e9 SimPLU3D et les biblioth\u00e8ques dans le pom.xml dans les balises repositories repository id ign-snapshots /id name Cogit Snapshots Repository /name url https://forge-cogit.ign.fr/nexus/content/repositories/snapshots/ /url snapshots enabled true /enabled /snapshots releases enabled false /enabled /releases /repository repository id ign-releases /id name Cogit Releases Repository /name url https://forge-cogit.ign.fr/nexus/content/repositories/releases/ /url snapshots enabled false /enabled /snapshots releases enabled true /enabled /releases /repository 4 - Faire un build du projet en utilisant par exemple : maven install .","title":"Premiers pas - Installation"},{"location":"begin/installation/#installer-simplu3d","text":"Les biblioth\u00e8ques de SimPLU3D sont construites avec Maven et cod\u00e9es en Java (la version 8 de la JDK est requise) et sont r\u00e9guli\u00e8rement d\u00e9ploy\u00e9es sur le serveur Maven de l'IGN. Si vous voulez essayer les codes d\u00e9crits dans cette documentation, vous pouvez installer le projet SimPLU3D-tutorial ou sinon vous pouvez directement l'installer dans votre projet. Attention : il se peut que la compilation du projet ne se fasse pas \u00e0 cause de probl\u00e8mes li\u00e9es \u00e0 la v\u00e9rification du certificat ssh de la forge IGN. Pour cela deux solutions : Installer localement le certificat comme d\u00e9crit dans le lien suivant http://ignf.github.io/geoxygene/documentation/developer/install.html Faire une installation s\u00e9curis\u00e9e lorsqu'il faudra construire le projet : mvn clean install -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true","title":"Installer SimPLU3D"},{"location":"begin/installation/#installer-le-code-simplu3d-tutorial","text":"Les \u00e9tapes suivantes sont n\u00e9cessaires : 1 - Installer un environnement de d\u00e9veloppement compatible avec Maven, nous recommandons de suivre ces \u00e9tapes : http://ignf.github.io/geoxygene/documentation/developer/install.html 2 - Cloner avec Git le projet https://github.com/SimPLU3D/simplu3D-tutorial 3 - Importer le projet dans l'environnement de d\u00e9veloppement. Dans Eclipse \"Fichier Importer un projet Importer un projet Maven\" 4 - Lancer une installation avec Maven : Click droit sur le projet et \" Run as Maven Install \" ou directement en ligne de commande : mvn clean install 5 - Lancer une construction du projet avec Eclipse : Project Build project Vous pouvez d\u00e9sormais ex\u00e9cuter la premi\u00e8re simulation .","title":"Installer le code SimPLU3D-tutorial"},{"location":"begin/installation/#installer-simplu3d-dans-un-autre-projet","text":"L'installation s'effectue simplement en cr\u00e9ant un projet qui pointe vers les d\u00e9pendances de SimPLU3D. Les \u00e9tapes sont les suivantes : 1 - Cr\u00e9ation d'un projet Maven 2 - Ajout de la d\u00e9pendance \u00e0 SimPLU3D dans le pom.xml dans les balises dependencies , en pensant \u00e0 v\u00e9rifier la version actuelle de SimPLU3D. dependency groupId fr.ign.cogit /groupId artifactId simplu3d /artifactId version 1.2-SNAPSHOT /version /dependency 3 - Ajouter les d\u00e9p\u00f4ts sur lesquels est d\u00e9ploy\u00e9 SimPLU3D et les biblioth\u00e8ques dans le pom.xml dans les balises repositories repository id ign-snapshots /id name Cogit Snapshots Repository /name url https://forge-cogit.ign.fr/nexus/content/repositories/snapshots/ /url snapshots enabled true /enabled /snapshots releases enabled false /enabled /releases /repository repository id ign-releases /id name Cogit Releases Repository /name url https://forge-cogit.ign.fr/nexus/content/repositories/releases/ /url snapshots enabled false /enabled /snapshots releases enabled true /enabled /releases /repository 4 - Faire un build du projet en utilisant par exemple : maven install .","title":"Installer SimPLU3D dans un autre projet"},{"location":"begin/intro/","text":"Introduction \uf0c1 SimPLU3D est une biblioth\u00e8que de recherche ce qui signifie qu'il n'y a actuellement pas d'interface graphique d\u00e9di\u00e9e \u00e0 la param\u00e9trisation du code et que la maintenance du code n'est pas effectu\u00e9e de mani\u00e8re tr\u00e8s r\u00e9guli\u00e8re. Cela signifie que pour \u00eatre capable d'utiliser SimPLU3D il est n\u00e9cessaire d'avoir des comp\u00e9tences : dans le langage de programmation Java et notamment une bonne connaissance de l'h\u00e9ritage et des g\u00e9n\u00e9rics ; dans le gestionnaire de projet Maven afin de pouvoir utiliser les biblioth\u00e8ques de SimPLU3D. La documentation s'organise autour de trois parties pr\u00e9sentant les trois aspects principaux du code de SimPLU3D : L'utilisation de donn\u00e9es g\u00e9ographiques \u00e0 travers son environnement g\u00e9ographique ; La g\u00e9n\u00e9ration de formes b\u00e2ties par optimisation ; La d\u00e9finition des contraintes morphologiques . Pour illustrer comment utiliser SimPLU3D, des codes sont mis \u00e0 disposition dans le projet SimPLU3D-tutorial . Ces codes partent de l'exemple d'une premi\u00e8re simulation et des \u00e9volutions sont apport\u00e9es suivant les aspects abord\u00e9es dans ces parties. Pour chacune des parties, le degr\u00e9 de personnalisation progresse de mani\u00e8re croissante avec une difficult\u00e9 \u00e9galement croissante. Cela d\u00e9bute par une simple param\u00e9trisation de fichiers de configuration pour aller jusqu'\u00e0 la cr\u00e9ation de nouvelles classes pour g\u00e9n\u00e9rer par exemple de nouvelles formes ou int\u00e9grer de nouvelles r\u00e8gles. Pour d\u00e9buter, il est tout d'abord n\u00e9cessaire d'installer SimPLU3D .","title":"Premiers pas - Introduction"},{"location":"begin/intro/#introduction","text":"SimPLU3D est une biblioth\u00e8que de recherche ce qui signifie qu'il n'y a actuellement pas d'interface graphique d\u00e9di\u00e9e \u00e0 la param\u00e9trisation du code et que la maintenance du code n'est pas effectu\u00e9e de mani\u00e8re tr\u00e8s r\u00e9guli\u00e8re. Cela signifie que pour \u00eatre capable d'utiliser SimPLU3D il est n\u00e9cessaire d'avoir des comp\u00e9tences : dans le langage de programmation Java et notamment une bonne connaissance de l'h\u00e9ritage et des g\u00e9n\u00e9rics ; dans le gestionnaire de projet Maven afin de pouvoir utiliser les biblioth\u00e8ques de SimPLU3D. La documentation s'organise autour de trois parties pr\u00e9sentant les trois aspects principaux du code de SimPLU3D : L'utilisation de donn\u00e9es g\u00e9ographiques \u00e0 travers son environnement g\u00e9ographique ; La g\u00e9n\u00e9ration de formes b\u00e2ties par optimisation ; La d\u00e9finition des contraintes morphologiques . Pour illustrer comment utiliser SimPLU3D, des codes sont mis \u00e0 disposition dans le projet SimPLU3D-tutorial . Ces codes partent de l'exemple d'une premi\u00e8re simulation et des \u00e9volutions sont apport\u00e9es suivant les aspects abord\u00e9es dans ces parties. Pour chacune des parties, le degr\u00e9 de personnalisation progresse de mani\u00e8re croissante avec une difficult\u00e9 \u00e9galement croissante. Cela d\u00e9bute par une simple param\u00e9trisation de fichiers de configuration pour aller jusqu'\u00e0 la cr\u00e9ation de nouvelles classes pour g\u00e9n\u00e9rer par exemple de nouvelles formes ou int\u00e9grer de nouvelles r\u00e8gles. Pour d\u00e9buter, il est tout d'abord n\u00e9cessaire d'installer SimPLU3D .","title":"Introduction"},{"location":"envgeo/custom-integration/","text":"title: Environnement g\u00e9ographique - Personnalisation du processus d'int\u00e9gration authors: - Micka\u00ebl Brasebin date: 2018-10-39 Comment personnaliser le processus d'int\u00e9gration : - Nom d'attributs : - Uilisation d'une base de donn\u00e9es - Om se trouve le code.","title":"Custom integration"},{"location":"envgeo/integration-test/","text":"Comment v\u00e9rifier que le processus d'int\u00e9gration s'est bien d\u00e9roul\u00e9e ? Future work : persistancy","title":"Environnement g\u00e9ographique - V\u00e9rifier le processus d'int\u00e9gration"},{"location":"envgeo/integration/","text":"Donn\u00e9es en entr\u00e9e et la pr\u00e9sentation du mod\u00e8le g\u00e9ographique d\u00e9taill\u00e9 comme en chapitre 3 de la th\u00e8se","title":"Environnement g\u00e9ographique - Processus d'int\u00e9gration"},{"location":"envgeo/intro/","text":"L'environnement g\u00e9ographique de SimPLU3D permet de d\u00e9crire l'ensemble des objets g\u00e9ographiques n\u00e9cessaires \u00e0 la g\u00e9n\u00e9ration de formes b\u00e2ties et notamment \u00e0 la v\u00e9rification des contraintes morphologiques. Ces objets g\u00e9ographiques peuvent concerner d'autres objets de la ville qui seront utilis\u00e9s pour v\u00e9rifier le respect des contraintes morphologiques (Par exemple, les routes, les types de limites s\u00e9paratives) ou en lien avec l'application de r\u00e8glements d'urbanisme d'un territoire (Par exemple, les plans de zonage ou les servitudes d'utilit\u00e9 publique). L'ensemble des codes g\u00e9rant cet aspect se trouve dans le d\u00e9p\u00f4t SimPLU3D-rules . Il contient : un mod\u00e8le g\u00e9ographique ; des m\u00e9thodes automatiques d'int\u00e9gration , pour renseigner automatiquement les classes, les attributs et les relations n\u00e9cessaires au mod\u00e8le \u00e0 partir de donn\u00e9es g\u00e9ographiques usuelles ; un exporteur pour visualiser dans un SIG les \u00e9l\u00e9ments cr\u00e9\u00e9s ; des possibilit\u00e9s de param\u00e9trer le processus d'int\u00e9gration afin de l'adapter \u00e0 diff\u00e9rents types de donn\u00e9es.","title":"Environnement g\u00e9ographique - Introduction"},{"location":"envgeo/modelgeo/","text":"Introduction \uf0c1 Le mod\u00e8le g\u00e9ographique a pour objet de d\u00e9crire les objets \u00e0 partir desquels on peut appliquer des contraintes morphologiques et d\u00e9crire la r\u00e9glementation urbaine. Le mod\u00e8le propos\u00e9 dans SimPLU3D a \u00e9t\u00e9 \u00e9tabli pour mod\u00e9liser les contraintes sp\u00e9cifiquement issues des Plans Locaux d'Urbanisme . Ainsi, le mod\u00e8le contient les concepts que l'on retrouve dans ces documents \u00e0 partir d'un \u00e9tat de l'art. Par exemple, si l'on consid\u00e8re la r\u00e8gle suivante : le mod\u00e8le permet de repr\u00e9senter les objets g\u00e9ographiques (en rouge), les propri\u00e9t\u00e9s (en bleu) et les relations (en vert). Ensuite, ces informations seront utilis\u00e9es pendant la simulation pour v\u00e9rifier si une configuration b\u00e2tie respecte ou non cette r\u00e8gle et cela est d\u00e9crit dans la section d\u00e9finition de contraintes morphologiques . Pour en savoir plus, le mod\u00e8le a fait l'objet d'une publication scientifique : Brasebin, M., J. Perret, S. Musti\u00e8re and C. Weber (2016) A Generic Model to Exploit Urban Regulation Knowledge, ISPRS International Journal of Geo-Information, vol. 5, n. 2, pp. 14, doi:10.3390/ijgi5020014 Vue global du mod\u00e8le \uf0c1 Le mod\u00e8le g\u00e9ographique est instanci\u00e9 dans le package fr.ign.cogit.simplu3d.model du projet SimPLU3D-rules . La figure pr\u00e9c\u00e9dente pr\u00e9sente l'ensemble des classes (sans leurs attributs) composant le mod\u00e8le g\u00e9ographique de SimPLU3D. Quatre ensembles de classes seront pr\u00e9sent\u00e9es : les classes repr\u00e9sentant la r\u00e9glementation , c'est \u00e0 dire les documents, les r\u00e8gles et les plans de zonage issus du PLU (ou d'autres r\u00e9glementations locales) ; les classes mod\u00e9lisant le parcellaire ; les classes concernant la mod\u00e9lisation 3D des b\u00e2timents ; les classes concernant les espaces publiques . Avant de pr\u00e9senter les classes, la classe parent Environnement sera d\u00e9crite, elle permet d'acc\u00e9der aux diff\u00e9rents objets du mod\u00e8le. Le mod\u00e8le est certes complexe dans l'absolu, mais il n'est n\u00e9anmoins (comme pr\u00e9sent\u00e9 dans l' exemple de la simulation basique ) pas n\u00e9cessaire de renseigner toutes les classes pour permettre l'ex\u00e9cution du mod\u00e8le. Seules les classes relatives aux parcelles doivent absolument \u00eatre instanci\u00e9es. Le fait de ne pas instancier une des classes du mod\u00e8le rend impossible la capacit\u00e9 d'\u00e9valuer des contraintes s'appuyant sur les \u00e9l\u00e9ments non instanci\u00e9s. Les diagrammes de classes sont g\u00e9n\u00e9r\u00e9es avec le plugin ObjectAID d'Eclipse et les fichiers sont disponibles dans le dossier diagram de SimPLU3D-rules Classe Environnement \uf0c1 La classe Environnement est une classe central dans le mod\u00e8le de SimPLU3D car elle le point d'entr\u00e9e pour acc\u00e9der \u00e0 l'ensemble des objets n\u00e9cessaires pour v\u00e9rifier le respect des r\u00e8gles morphologiques. Elle est compos\u00e9e d'une s\u00e9rie d'accesseurs qui permettent d'acc\u00e9der aux objets pr\u00e9sent\u00e9s dans ce mod\u00e8le (cf image ci dessus) et \u00e9galement au terrain qui servira de r\u00e9f\u00e9rence. L'instanciation d'un environnement s'effectue : soit lors du chargement de donn\u00e9es gr\u00e2ce \u00e0 l'un des processus d'int\u00e9gration existant (voir section sur les processus d'int\u00e9gration ) ; soit par le biais de la m\u00e9thode statique Environnement.createEnvironnement() qui cr\u00e9\u00e9 un environnement compl\u00e8tement vide. Dans tous les cas, l'objet environnement est unique, il s'agit d'un singleton que l'on peut r\u00e9cup\u00e9rer par la m\u00e9thode statique Environnement.getInstance() . Classes de r\u00e9glementation \uf0c1 Classes du parcellaire \uf0c1 Classes des b\u00e2timents \uf0c1 Classes de l'espace publique \uf0c1","title":"Environnement g\u00e9ographique - Mod\u00e8le g\u00e9ographique"},{"location":"envgeo/modelgeo/#introduction","text":"Le mod\u00e8le g\u00e9ographique a pour objet de d\u00e9crire les objets \u00e0 partir desquels on peut appliquer des contraintes morphologiques et d\u00e9crire la r\u00e9glementation urbaine. Le mod\u00e8le propos\u00e9 dans SimPLU3D a \u00e9t\u00e9 \u00e9tabli pour mod\u00e9liser les contraintes sp\u00e9cifiquement issues des Plans Locaux d'Urbanisme . Ainsi, le mod\u00e8le contient les concepts que l'on retrouve dans ces documents \u00e0 partir d'un \u00e9tat de l'art. Par exemple, si l'on consid\u00e8re la r\u00e8gle suivante : le mod\u00e8le permet de repr\u00e9senter les objets g\u00e9ographiques (en rouge), les propri\u00e9t\u00e9s (en bleu) et les relations (en vert). Ensuite, ces informations seront utilis\u00e9es pendant la simulation pour v\u00e9rifier si une configuration b\u00e2tie respecte ou non cette r\u00e8gle et cela est d\u00e9crit dans la section d\u00e9finition de contraintes morphologiques . Pour en savoir plus, le mod\u00e8le a fait l'objet d'une publication scientifique : Brasebin, M., J. Perret, S. Musti\u00e8re and C. Weber (2016) A Generic Model to Exploit Urban Regulation Knowledge, ISPRS International Journal of Geo-Information, vol. 5, n. 2, pp. 14, doi:10.3390/ijgi5020014","title":"Introduction"},{"location":"envgeo/modelgeo/#vue-global-du-modele","text":"Le mod\u00e8le g\u00e9ographique est instanci\u00e9 dans le package fr.ign.cogit.simplu3d.model du projet SimPLU3D-rules . La figure pr\u00e9c\u00e9dente pr\u00e9sente l'ensemble des classes (sans leurs attributs) composant le mod\u00e8le g\u00e9ographique de SimPLU3D. Quatre ensembles de classes seront pr\u00e9sent\u00e9es : les classes repr\u00e9sentant la r\u00e9glementation , c'est \u00e0 dire les documents, les r\u00e8gles et les plans de zonage issus du PLU (ou d'autres r\u00e9glementations locales) ; les classes mod\u00e9lisant le parcellaire ; les classes concernant la mod\u00e9lisation 3D des b\u00e2timents ; les classes concernant les espaces publiques . Avant de pr\u00e9senter les classes, la classe parent Environnement sera d\u00e9crite, elle permet d'acc\u00e9der aux diff\u00e9rents objets du mod\u00e8le. Le mod\u00e8le est certes complexe dans l'absolu, mais il n'est n\u00e9anmoins (comme pr\u00e9sent\u00e9 dans l' exemple de la simulation basique ) pas n\u00e9cessaire de renseigner toutes les classes pour permettre l'ex\u00e9cution du mod\u00e8le. Seules les classes relatives aux parcelles doivent absolument \u00eatre instanci\u00e9es. Le fait de ne pas instancier une des classes du mod\u00e8le rend impossible la capacit\u00e9 d'\u00e9valuer des contraintes s'appuyant sur les \u00e9l\u00e9ments non instanci\u00e9s. Les diagrammes de classes sont g\u00e9n\u00e9r\u00e9es avec le plugin ObjectAID d'Eclipse et les fichiers sont disponibles dans le dossier diagram de SimPLU3D-rules","title":"Vue global du mod\u00e8le"},{"location":"envgeo/modelgeo/#classe-environnement","text":"La classe Environnement est une classe central dans le mod\u00e8le de SimPLU3D car elle le point d'entr\u00e9e pour acc\u00e9der \u00e0 l'ensemble des objets n\u00e9cessaires pour v\u00e9rifier le respect des r\u00e8gles morphologiques. Elle est compos\u00e9e d'une s\u00e9rie d'accesseurs qui permettent d'acc\u00e9der aux objets pr\u00e9sent\u00e9s dans ce mod\u00e8le (cf image ci dessus) et \u00e9galement au terrain qui servira de r\u00e9f\u00e9rence. L'instanciation d'un environnement s'effectue : soit lors du chargement de donn\u00e9es gr\u00e2ce \u00e0 l'un des processus d'int\u00e9gration existant (voir section sur les processus d'int\u00e9gration ) ; soit par le biais de la m\u00e9thode statique Environnement.createEnvironnement() qui cr\u00e9\u00e9 un environnement compl\u00e8tement vide. Dans tous les cas, l'objet environnement est unique, il s'agit d'un singleton que l'on peut r\u00e9cup\u00e9rer par la m\u00e9thode statique Environnement.getInstance() .","title":"Classe Environnement"},{"location":"envgeo/modelgeo/#classes-de-reglementation","text":"","title":"Classes de r\u00e9glementation"},{"location":"envgeo/modelgeo/#classes-du-parcellaire","text":"","title":"Classes du parcellaire"},{"location":"envgeo/modelgeo/#classes-des-batiments","text":"","title":"Classes des b\u00e2timents"},{"location":"envgeo/modelgeo/#classes-de-lespace-publique","text":"","title":"Classes de l'espace publique"},{"location":"generator/custom-generator/","text":"Comment customizer le g\u00e9n\u00e9rateur de formes en jouant sur les param\u00e8tres md.","title":"Custom generator"},{"location":"generator/custom-optimisation/","text":"Comment customizer la fonction d'optimisation ? Principe de graph d'\u00e9valuation ?","title":"Custom optimisation"},{"location":"generator/custom-shape/","text":"Comment customizer les formes utilis\u00e9es ?","title":"Custom shape"},{"location":"generator/intro/","text":"Principe g\u00e9n\u00e9ral de la g\u00e9n\u00e9ration avec SimPLU3D et l'utilisation de la librjmcmc4j. Dire que le code est dans SimPLU3D","title":"Intro"},{"location":"generator/principe/","text":"Principe d\u00e9taill\u00e9 de la g\u00e9n\u00e9ration avec SimPLU3D et l'utilisation de la librjmcmc4j. (cf chapitre 3)","title":"Principe"},{"location":"openmole/intro/","text":"1 pr\u00e9sentation d'OpenMole 2 cr\u00e9ation d'un plugin avec osgi bundle 3 lancer la distribution avec le script ....","title":"Intro"},{"location":"principe/intro/","text":"Principe du fonctionnement de SimPLU3D \uf0c1 Le simulateur de base fait bien ressortir trois composants principaux de SimPLU3D : l'environnement g\u00e9ographique environnement g\u00e9ographique qui contient les objets g\u00e9ographiques mod\u00e9lis\u00e9s n\u00e9cessaires \u00e0 la simulation avec SimPLU3D ; la d\u00e9finition d'un g\u00e9n\u00e9rateur de formes , qui d\u00e9finit \u00e0 la fois la strat\u00e9gie d'optimisation employ\u00e9 par le simulateur et la forme des configurations simul\u00e9es ; la d\u00e9finition de contraintes morphologiques , qui s'appuient sur les \u00e9l\u00e9ments du mod\u00e8le de l'environnement g\u00e9ographique. Pr\u00e9sentaiton simple de l'approche \uf0c1 Pendant une simulation, SimPLU3D essaye it\u00e9rativement diff\u00e9rentes configurations g\u00e9n\u00e9r\u00e9es en accord avec la g\u00e9n\u00e9rateur de formes. \u00c0 chaque it\u00e9ration, une configuration est test\u00e9e. Il faut tout d'abord que celle-ci respecte les r\u00e8gles morphologiques utilis\u00e9es et d\u00e9finies relativement \u00e0 l'environnement g\u00e9ographique (Par exemple, recul par rapport \u00e0 la voirie, distance aux b\u00e2timents existants, etc.). Ensuite, la configuration propos\u00e9e est \u00e9valu\u00e9e relativement \u00e0 une fonction d'optimisation est la configuration est test\u00e9e suivant des crit\u00e8res d'acceptation propres \u00e0 la m\u00e9thode employ\u00e9e (\u00e0 savoir le recuit simul\u00e9 ). Dans les prochaines sections, ces diff\u00e9rents points seront abord\u00e9s ainsi que la pr\u00e9sentation plus d\u00e9taill\u00e9e de l'algorithme.","title":"Principe de fonctionnement de SimPLU3D"},{"location":"principe/intro/#principe-du-fonctionnement-de-simplu3d","text":"Le simulateur de base fait bien ressortir trois composants principaux de SimPLU3D : l'environnement g\u00e9ographique environnement g\u00e9ographique qui contient les objets g\u00e9ographiques mod\u00e9lis\u00e9s n\u00e9cessaires \u00e0 la simulation avec SimPLU3D ; la d\u00e9finition d'un g\u00e9n\u00e9rateur de formes , qui d\u00e9finit \u00e0 la fois la strat\u00e9gie d'optimisation employ\u00e9 par le simulateur et la forme des configurations simul\u00e9es ; la d\u00e9finition de contraintes morphologiques , qui s'appuient sur les \u00e9l\u00e9ments du mod\u00e8le de l'environnement g\u00e9ographique.","title":"Principe du fonctionnement de SimPLU3D"},{"location":"principe/intro/#presentaiton-simple-de-lapproche","text":"Pendant une simulation, SimPLU3D essaye it\u00e9rativement diff\u00e9rentes configurations g\u00e9n\u00e9r\u00e9es en accord avec la g\u00e9n\u00e9rateur de formes. \u00c0 chaque it\u00e9ration, une configuration est test\u00e9e. Il faut tout d'abord que celle-ci respecte les r\u00e8gles morphologiques utilis\u00e9es et d\u00e9finies relativement \u00e0 l'environnement g\u00e9ographique (Par exemple, recul par rapport \u00e0 la voirie, distance aux b\u00e2timents existants, etc.). Ensuite, la configuration propos\u00e9e est \u00e9valu\u00e9e relativement \u00e0 une fonction d'optimisation est la configuration est test\u00e9e suivant des crit\u00e8res d'acceptation propres \u00e0 la m\u00e9thode employ\u00e9e (\u00e0 savoir le recuit simul\u00e9 ). Dans les prochaines sections, ces diff\u00e9rents points seront abord\u00e9s ainsi que la pr\u00e9sentation plus d\u00e9taill\u00e9e de l'algorithme.","title":"Pr\u00e9sentaiton simple de l'approche"},{"location":"rules/formats/","text":"Comment utiliser des formats de fichiers de r\u00e8gles ? - Pas de formats d\u00e9finis pour le moment car il n'existe pas de normes et besoin souvent de changer les r\u00e8gles utilis\u00e9es, mais on va prendre les exemples d'ArtiScales et de smartPLU pour montrer comment faire avec les zones","title":"Formats"},{"location":"rules/intro/","text":"Gestion des r\u00e8gles d'urbanisme (principe et page d'accueil de la sous section)","title":"Intro"},{"location":"rules/predicate/","text":"Principe du pr\u00e9dicate et comment en d\u00e9finir un (avec l'extension de la m\u00e9thode qui va bien)","title":"Predicate"},{"location":"rules/topologique/","text":"Comment d\u00e9finir une contrainte topologique en utilisant des formes sp\u00e9ciales ?","title":"Topologique"},{"location":"visitor/intro/","text":"Les visiteurs qui existent pour suivrent l'\u00e9volution et produire des sorties au fil de la simulation","title":"Intro"}]}